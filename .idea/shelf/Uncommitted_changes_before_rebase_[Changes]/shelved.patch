Index: app/src/main/java/com/example/ecgwidgetsviewer/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.ecgwidgetsviewer\r\n\r\nimport android.os.Bundle\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.widget.LinearLayout\r\nimport android.view.LayoutInflater\r\nimport com.example.ecgwidgetsviewer.GraphWidget\r\nimport com.example.ecgwidgetsviewer.GraphMode\r\nimport com.example.ecgwidgetsviewer.StoreWrapper\r\nimport com.example.ecgwidgetsviewer.Circular\r\nimport com.example.ecgwidgetsviewer.ConectSimu\r\n\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    private lateinit var graphWidget: GraphWidget\r\n    private lateinit var containerLayout: LinearLayout\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        containerLayout = findViewById(R.id.containerLayout)\r\n\r\n        // Agregar automáticamente un solo widget ECG\r\n        agregarECGWidgetUnico()\r\n        graphWidget = findViewById(R.id.graphWidget)\r\n\r\n        // Inicializa el gráfico con tamaño de buffer y modo gráfico (flow o overlay)\r\n        graphWidget.setMod(seriesLength = 200, mode = GraphMode.flow)\r\n\r\n        // Inicia el gráfico\r\n        graphWidget.start()\r\n\r\n        // Comienza a simular datos ECG automáticamente\r\n        startDataSimulation()\r\n    }\r\n    private fun agregarECGWidgetUnico() {\r\n        val inflater = LayoutInflater.from(this)\r\n        val ecgView = inflater.inflate(R.layout.cart_view_layout, containerLayout, false)\r\n\r\n        // Opcional: iniciar simulación desde aquí si tienes una clase como ConectSimu\r\n        val graphWidget = ecgView.findViewById<GraphWidget>(R.id.painting_view)\r\n        val storeWrapper = StoreWrapper()\r\n        val circular = Circular() // Asegúrate de que esté correctamente importado\r\n        ConectSimu(graphWidget, storeWrapper, circular).start()\r\n\r\n        containerLayout.addView(ecgView)\r\n    }\r\n    private fun startDataSimulation() {\r\n        Thread {\r\n            while (true) {\r\n                val simulatedValue = (-200..200).random() // Puedes ajustar el rango\r\n                graphWidget.post {\r\n                    graphWidget.addDataPoint(simulatedValue)\r\n                }\r\n                Thread.sleep(50) // 20 Hz aprox (ajustable)\r\n            }\r\n        }.start()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ecgwidgetsviewer/MainActivity.kt b/app/src/main/java/com/example/ecgwidgetsviewer/MainActivity.kt
--- a/app/src/main/java/com/example/ecgwidgetsviewer/MainActivity.kt	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
+++ b/app/src/main/java/com/example/ecgwidgetsviewer/MainActivity.kt	(date 1749865141091)
@@ -4,57 +4,46 @@
 import androidx.appcompat.app.AppCompatActivity
 import android.widget.LinearLayout
 import android.view.LayoutInflater
-import com.example.ecgwidgetsviewer.GraphWidget
-import com.example.ecgwidgetsviewer.GraphMode
-import com.example.ecgwidgetsviewer.StoreWrapper
-import com.example.ecgwidgetsviewer.Circular
-import com.example.ecgwidgetsviewer.ConectSimu
-
+import android.widget.TextView
 
 class MainActivity : AppCompatActivity() {
 
     private lateinit var graphWidget: GraphWidget
     private lateinit var containerLayout: LinearLayout
+    private lateinit var bpmTextView: TextView
+    private var simulator: SimuECG? = null
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
         containerLayout = findViewById(R.id.containerLayout)
 
-        // Agregar automáticamente un solo widget ECG
-        agregarECGWidgetUnico()
-        graphWidget = findViewById(R.id.graphWidget)
-
-        // Inicializa el gráfico con tamaño de buffer y modo gráfico (flow o overlay)
-        graphWidget.setMod(seriesLength = 200, mode = GraphMode.flow)
-
-        // Inicia el gráfico
-        graphWidget.start()
-
-        // Comienza a simular datos ECG automáticamente
-        startDataSimulation()
-    }
-    private fun agregarECGWidgetUnico() {
+        // Infla la tarjeta de ECG y agrégala al contenedor
         val inflater = LayoutInflater.from(this)
-        val ecgView = inflater.inflate(R.layout.cart_view_layout, containerLayout, false)
-
-        // Opcional: iniciar simulación desde aquí si tienes una clase como ConectSimu
-        val graphWidget = ecgView.findViewById<GraphWidget>(R.id.painting_view)
-        val storeWrapper = StoreWrapper()
-        val circular = Circular() // Asegúrate de que esté correctamente importado
-        ConectSimu(graphWidget, storeWrapper, circular).start()
-
+        val ecgView = inflater.inflate(R.layout.card_view_layout, containerLayout, false)
+        graphWidget = ecgView.findViewById(R.id.painting_view)
         containerLayout.addView(ecgView)
-    }
-    private fun startDataSimulation() {
-        Thread {
-            while (true) {
-                val simulatedValue = (-200..200).random() // Puedes ajustar el rango
-                graphWidget.post {
-                    graphWidget.addDataPoint(simulatedValue)
-                }
-                Thread.sleep(50) // 20 Hz aprox (ajustable)
-            }
-        }.start()
+
+        // TextView para mostrar el BPM simulado
+        bpmTextView = TextView(this)
+        containerLayout.addView(bpmTextView)
+
+        // Inicializa el gráfico
+        graphWidget.setMod(seriesLength = 200, mode = GraphMode.flowing)
+        graphWidget.start()
+
+        // Inicia el simulador local de BPM
+        simulator = SimuECG{ bpm ->
+            runOnUiThread {
+                bpmTextView.text = "BPM simulado: ${bpm.toInt()}"
+                graphWidget.addDataPoint(bpm.toInt())
+            }
+        }
+        simulator?.start()
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+        simulator?.stop()
     }
-}
+}
\ No newline at end of file
Index: app/src/main/java/com/example/ecgwidgetsviewer/StoreWrapper.kt
===================================================================
diff --git a/app/src/main/java/com/example/ecgwidgetsviewer/StoreWrapper.kt b/app/src/main/java/com/example/ecgwidgetsviewer/StoreWrapper.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/ecgwidgetsviewer/StoreWrapper.kt	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
+++ /dev/null	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
@@ -1,86 +0,0 @@
-package com.example.ecgwidgetsviewer
-
-import android.graphics.Point
-import android.graphics.Path
-import android.util.Size
-
-class StoreWrapper(
-    private val capacity: Int,
-    private val scaling: Int,
-    private var graphMode: GraphMode
-) {
-    private var data = IntArray(capacity)
-    private var currentIndex = 0
-    private var isFilled = false
-
-    var pathBefore: Path? = null
-    var pathAfter: Path? = null
-    var point: Point? = null
-
-    fun write(value: Int) {
-        data[currentIndex] = value
-        currentIndex = (currentIndex + 1) % capacity
-        if (currentIndex == 0) isFilled = true
-    }
-
-    fun getCurrentData(): List<Int> {
-        val output = mutableListOf<Int>()
-        val total = if (isFilled) capacity else currentIndex
-        var idx = if (isFilled) currentIndex else 0
-        for (i in 0 until total) {
-            output.add(data[idx])
-            idx = (idx + 1) % capacity
-        }
-        return output
-    }
-
-    fun clear() {
-        data.fill(0)
-        currentIndex = 0
-        isFilled = false
-    }
-
-    fun prepareDrawing(size: Size, shiftH: Double) {
-        val width = size.width
-        val height = size.height
-        val deltaX = width.toFloat() / capacity
-        val midY = height / 2.0
-
-        pathBefore = Path()
-        pathAfter = Path()
-
-        var index = if (isFilled) currentIndex else 0
-        val totalPoints = if (isFilled) capacity else currentIndex
-
-        for (i in 0 until totalPoints) {
-            val x = i * deltaX
-            val y = (midY + (data[index] / scaling.toDouble())).toFloat()
-
-            if (i == 0) {
-                pathBefore!!.moveTo(x, y)
-            } else {
-                pathBefore!!.lineTo(x, y)
-            }
-
-            index = (index + 1) % capacity
-        }
-
-        val lastX = totalPoints * deltaX
-        val lastY = (midY + (data[(currentIndex - 1 + capacity) % capacity] / scaling.toDouble())).toFloat()
-        point = Point(lastX.toInt(), lastY.toInt())
-    }
-
-    fun updateBuffer(counter: Int) {
-        // Placeholder por si luego quieres usarlo
-    }
-
-    fun isFull(): Boolean = isFilled
-
-    fun mode(): GraphMode = graphMode
-
-    fun setMode(mode: GraphMode) {
-        this.graphMode = mode
-    }
-
-    fun drawingFrequency(): Int = 60
-}
Index: app/src/main/java/com/example/ecgwidgetsviewer/ConectSimu.kt
===================================================================
diff --git a/app/src/main/java/com/example/ecgwidgetsviewer/ConectSimu.kt b/app/src/main/java/com/example/ecgwidgetsviewer/ConectSimu.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/ecgwidgetsviewer/ConectSimu.kt	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
+++ /dev/null	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
@@ -1,31 +0,0 @@
-package com.example.ecgwidgetsviewer
-
-import java.io.BufferedReader
-import java.io.InputStreamReader
-import java.net.Socket
-
-class ConectSimu(private val onDataReceived: (Int) -> Unit) {
-
-    fun startClient(ip: String = "192.168.0.11", port: Int = 12345) {
-        Thread {
-            try {
-                val socket = Socket(ip, port)
-                val reader = BufferedReader(InputStreamReader(socket.getInputStream()))
-
-                var line: String?
-                while (reader.readLine().also { line = it } != null) {
-                    val bpm = line!!.trim().toIntOrNull()
-                    if (bpm != null) {
-                        onDataReceived(bpm)
-                    }
-                }
-
-                reader.close()
-                socket.close()
-
-            } catch (e: Exception) {
-                e.printStackTrace()
-            }
-        }.start()
-    }
-}
Index: app/src/main/java/com/example/ecgwidgetsviewer/EstadoPaciente.kt
===================================================================
diff --git a/app/src/main/java/com/example/ecgwidgetsviewer/EstadoPaciente.kt b/app/src/main/java/com/example/ecgwidgetsviewer/EstadoPaciente.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/ecgwidgetsviewer/EstadoPaciente.kt	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
+++ /dev/null	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
@@ -1,3 +0,0 @@
-package com.example.ecgwidgetsviewer
-
-data class EstadoPaciente(val condition: String)
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nplugins {\r\n    id(\"com.android.application\") version \"8.3.0\" apply false\r\n    id(\"org.jetbrains.kotlin.android\") version \"1.9.22\" apply false\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
+++ b/build.gradle.kts	(date 1749865141073)
@@ -1,5 +1,5 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 plugins {
-    id("com.android.application") version "8.3.0" apply false
+    id("com.android.application") version "8.10.1" apply false
     id("org.jetbrains.kotlin.android") version "1.9.22" apply false
 }
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"jbr-21\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
+++ b/.idea/misc.xml	(date 1749864989273)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
   <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
Index: .gradle/buildOutputCleanup/cache.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Tue Jun 03 18:53:29 GMT-05:00 2025\r\ngradle.version=8.4\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/.gradle/buildOutputCleanup/cache.properties b/.gradle/buildOutputCleanup/cache.properties
--- a/.gradle/buildOutputCleanup/cache.properties	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
+++ b/.gradle/buildOutputCleanup/cache.properties	(date 1749865143340)
@@ -1,2 +1,2 @@
-#Tue Jun 03 18:53:29 GMT-05:00 2025
-gradle.version=8.4
+#Fri Jun 13 20:39:03 GMT-05:00 2025
+gradle.version=8.11.1
Index: app/src/main/java/com/example/ecgwidgetsviewer/SimuECG.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/ecgwidgetsviewer/SimuECG.kt b/app/src/main/java/com/example/ecgwidgetsviewer/SimuECG.kt
new file mode 100644
--- /dev/null	(date 1749865097129)
+++ b/app/src/main/java/com/example/ecgwidgetsviewer/SimuECG.kt	(date 1749865097129)
@@ -0,0 +1,22 @@
+package com.example.ecgwidgetsviewer
+
+import kotlinx.coroutines.*
+import kotlin.random.Random
+
+class SimuECG(private val onBpmGenerated: (Float) -> Unit) {
+    private var job: Job? = null
+
+    fun start() {
+        job = CoroutineScope(Dispatchers.IO).launch {
+            while (isActive) {
+                val bpm = Random.nextDouble(60.0, 100.0).toFloat()
+                onBpmGenerated(bpm)
+                delay(1000) // 1 segundo entre señales
+            }
+        }
+    }
+
+    fun stop() {
+        job?.cancel()
+    }
+}
\ No newline at end of file
Index: .idea/SimuladorECG_Kotlin.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/SimuladorECG_Kotlin.iml b/.idea/SimuladorECG_Kotlin.iml
new file mode 100644
--- /dev/null	(date 1749865023108)
+++ b/.idea/SimuladorECG_Kotlin.iml	(date 1749865023108)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Tue Mar 12 17:53:40 IST 2024\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-bin.zip\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	(revision c65e6899839ce6c5f35a4d1427afd48a7431c3a0)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1749865141079)
@@ -1,6 +1,6 @@
 #Tue Mar 12 17:53:40 IST 2024
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
diff --git a/.gradle/8.11.1/gc.properties b/.gradle/8.11.1/gc.properties
new file mode 100644
